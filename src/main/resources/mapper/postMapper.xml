<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.bookJeog.mapper.PostMapper">
    <!-- 전체 독후감 조회(관리자) -->
    <select id="selectAllBookPost" resultType="bookPostVO">
        select p.id, member_id, createdDate, updatedDate, book_post_title, book_post_text,
                book_post_is_public, book_post_start_date, book_post_end_date, bp.book_isbn, bookPostLikeCount, bookPostVoteCount
            from (tbl_post p join tbl_book_post bp on p.id = bp.id
                left join tbl_selected_book_post sbp on bp.id = sbp.id
                left join tbl_normal_book_post nbp on bp.id = nbp.id
                /*and sbp.book_post_status = 'PUBLIC' and bp.book_post_is_public = 'PUBLIC'*/
                left join (select book_post_id, count(*) as bookPostLikeCount
                           from tbl_book_post_like
                           group by book_post_id) cnt
                on cnt.book_post_id = bp.id
                left join
                (select book_post_id, count(*) as bookPostVoteCount
                 from tbl_book_post_vote
                 group by book_post_id) vote
                  on vote.book_post_id = bp.id
                     )
        order by p.id desc
            limit #{rowCount}
                offset #{offset}

    </select>
    <!-- 페이지네이션용 카운트 -->
    <select id="countAllBookPost" resultType="_int">
        select count(*)
        from tbl_book_post bp
        left join tbl_selected_book_post sbp on bp.id = sbp.id
        left join tbl_normal_book_post nbp on bp.id = nbp.id
    </select>

    <!-- 단일 독후감 조회 -->
    <select id="selectBookPostById" resultType="bookPostVO">
        select bp.id, book_post_title, member_id
        from tbl_book_post bp
        join tbl_post p on bp.id = p.id
        where bp.id = #{id}
    </select>


    <!--게시물 id 로 memberId 조회-->
    <select id="selectMemberIdByPostId" resultType="postVO">
        select member_id
        from tbl_post
        where id = #{postId}
    </select>


    <!-- 토론 게시글 조회(관리자)-->
    <select id="selectAllDiscussionPost" resultType="discussionVO">
        select d.id, discussion_title, discussion_text, book_isbn, p.member_id, p.createdDate, p.updatedDate
        from tbl_discussion d
            join tbl_post p
                on d.id = p.id
                    order by d.id desc
        <where>
            <if test="keyword != null and keyword != ''">
                discussion_title like concat('%', #{keyword}, '%') or
                discussion_text like concat('%', #{keyword}, '%')
            </if>
        </where>
                    limit #{rowCount}
                        offset #{offset}

    </select>

    <!-- 토론 게시글 페이징 처리 카운트-->
    <select id="countAllDiscussionPost" resultType="_int">
        select count(*)
        from tbl_discussion d
                 join tbl_post p
                      on d.id = p.id
        <where>
            <if test="keyword != null and keyword != ''">
                discussion_title like concat('%', #{keyword}, '%') or
                discussion_text like concat('%', #{keyword}, '%')
            </if>
        </where>
    </select>

    <!--  이 책으로 작성한 독후감 일부 조회  -->
    <select id="selectThisBookPosts" resultType="bookPostMemberDTO">
        select
            bp.id,
            bp.book_post_title,
            bp.book_post_text,
            pm.member_nickname,
            pm.id as member_id,
            f.file_name, f.file_path
        from tbl_book_post bp
                 join tbl_post p on p.id = bp.id
                 join tbl_personal_member pm on pm.id = p.member_id
                 join tbl_member_profile mp on mp.member_id = pm.id
                 join tbl_file f on f.id = mp.id
        where bp.book_post_is_public = 'PUBLIC'
          and bp.book_isbn = #{bookIsbn}
        order by p.createdDate desc
        limit 5
    </select>

    <!--  이 책으로 작성한 독후감 전체 조회(무한스크롤 6개씩)  -->
    <select id="selectThisAllBookPosts" resultType="bookPostMemberDTO">
        select
            bp.id,
            bp.book_post_title,
            bp.book_post_text,
            pm.member_nickname,
            pm.id as member_id,
            f.file_name, f.file_path
        from tbl_book_post bp
                 join tbl_post p on p.id = bp.id
                 join tbl_personal_member pm on pm.id = p.member_id
                 join tbl_member_profile mp on mp.member_id = pm.id
                 join tbl_file f on f.id = mp.id
        where bp.book_post_is_public = 'PUBLIC'
          and bp.book_isbn = #{bookIsbn}
        order by p.createdDate desc
        limit 6 offset #{offset}
    </select>

    <!--  이 책으로 작성한 독후감 전체 개수 조회  -->
    <select id="selectBookAllPostsCount" resultType="_int">
        select
            count(*)
        from tbl_book_post bp
                 join tbl_post p on p.id = bp.id
                 join tbl_personal_member pm on pm.id = p.member_id
                 join tbl_member_profile mp on mp.member_id = pm.id
                 join tbl_file f on f.id = mp.id
        where bp.book_post_is_public = 'PUBLIC'
          and bp.book_isbn = #{bookIsbn}
    </select>

    <!-- Quartz 로 매달 N 일에 자동으로 후보로 등록-->
    <insert id="insertTopBookPosts">
        insert into tbl_monthly_book_post (book_post_id, book_post_title, book_post_text, book_post_like_count)
        values (#{bookPostId}, #{bookPostTitle}, #{bookPostText}, #{bookPostLikeCount})
    </insert>

    <!-- Quartz 로 가져올 후보들 현재는 테스트라 top20 만 가져옴-->
    <select id="selectTopPosts" resultType="bookPostVO">
        select p.id, book_post_title, book_post_text, bookPostLikeCount
        from tbl_post p join tbl_book_post bp on p.id = bp.id
                        join tbl_selected_book_post sbp on bp.id = sbp.id and sbp.book_post_status = 'PUBLIC' and bp.book_post_is_public = 'PUBLIC'
                        left join (
            select book_post_id, count(*) as bookPostLikeCount
            from tbl_book_post_like
            group by book_post_id
        ) cnt
          on cnt.book_post_id = bp.id
           order by bookPostLikeCount desc
        limit 20;
    </select>

    <!-- top20 후보 중 투표 수로 정렬하여 가져옴. -->
    <select id="selectMonthlyBookPosts" resultType="monthlyBookPostVO">
        select *
        from tbl_monthly_book_post mbp
            left join
            (
                select book_post_id, count(*) as bookPostVoteCount
                from tbl_book_post_vote
                group by book_post_id
            ) vote
            on mbp.book_post_id = vote.book_post_id
            order by bookPostVoteCount desc
        limit #{rowCount}
            offset #{offset}
    </select>

    <!--top20 페이징 처리용 -->
    <select id="countTopPosts" resultType="_int">
        select count(*) from tbl_monthly_book_post
    </select>

    <!-- top1 독후감 select -->
    <select id="selectBestPost" resultType="monthlyBookPostVO">
        select *
        from tbl_monthly_book_post mbp
                 left join
             (
                 select book_post_id, count(*) as bookPostVoteCount
                 from tbl_book_post_vote
                 group by book_post_id
             ) vote
             on mbp.book_post_id = vote.book_post_id
        order by bookPostVoteCount desc
        limit 1
    </select>

    <!-- top1 독후감 테이블에 넣기 (Quartz 로 매달 1일에)-->
    <insert id="insertBestPost">
         insert into tbl_best_book_post (book_post_id, book_post_title, book_post_text)
         values (#{bookPostId}, #{bookPostTitle}, #{bookPostText})
    </insert>

    <!-- 독후감 상태 변경(부적절한 게시글 처리용)  -->
    <update id="updateBookPostStatus">
        update tbl_book_post
        set book_post_is_public = 'PRIVATE'
        where id = #{postId}
    </update>

    <select id="selectPostById" resultType="postVO">
        select *
        from tbl_post
        where id = #{id}
    </select>

    <!--  검색한 검색어에 맞는 독후감 통합검색 조회  -->
    <select id="searchBookPosts" resultType="bookPostMemberDTO">
        SELECT
            p.member_id,
            p.id,
            bp.book_post_title,
            bp.book_post_text,
            pm.member_nickname,
            f.file_path,
            f.file_name,
            DATE_FORMAT(p.createdDate, '%Y.%m.%d') AS createdDate,
            bp.book_isbn
        from tbl_book_post bp
                 join tbl_post p on p.id = bp.id
                 join tbl_personal_member pm on pm.id = p.member_id
                 join tbl_member_profile mp on mp.member_id = pm.id
                 join tbl_file f on f.id = mp.id
        WHERE bp.book_post_is_public = 'PUBLIC'
          AND (
            bp.book_post_title LIKE concat('%', #{keyword}, '%')
                OR bp.book_post_text LIKE concat('%', #{keyword}, '%')
                or bp.book_title like concat('%', #{keyword}, '%')
                OR pm.member_nickname LIKE concat('%', #{keyword}, '%')
            )
        ORDER BY p.createdDate DESC
        LIMIT 3
    </select>
    <!--  검색한 검색어에 맞는 독후감 통합검색 개수 조회  -->
    <select id="selectBookPostsCount" resultType="_int">
        SELECT
            count(*)
        from tbl_book_post bp
                 join tbl_post p on p.id = bp.id
                 join tbl_personal_member pm on pm.id = p.member_id
                 join tbl_member_profile mp on mp.member_id = pm.id
                 join tbl_file f on f.id = mp.id
        WHERE bp.book_post_is_public = 'PUBLIC'
          AND (
            bp.book_post_title LIKE concat('%', #{keyword}, '%')
                OR bp.book_post_text LIKE concat('%', #{keyword}, '%')
                or bp.book_title like concat('%', #{keyword}, '%')
                OR pm.member_nickname LIKE concat('%', #{keyword}, '%')
            )
        ORDER BY p.createdDate DESC
    </select>
    <!--  검색한 검색어에 맞는 독후감 무한스크롤로 출력  -->
    <select id="selectAllBooks" resultType="bookPostMemberDTO">
        select
        bp.id,
        bp.book_post_title,
        bp.book_post_text,
        bp.book_isbn,
        p.createdDate as createdDate,
        pm.member_nickname,
        pm.id as member_id,
        count(bpl.id) as like_count,
        f.file_name,
        f.file_path
        from tbl_book_post bp
        join tbl_post p on p.id = bp.id
        left join tbl_book_post_like bpl on bpl.book_post_id = bp.id
        join tbl_personal_member pm on pm.id = p.member_id
        join tbl_member_profile mp on mp.member_id = pm.id
        join tbl_file f on f.id = mp.id
        where bp.book_post_is_public = 'PUBLIC'
        and (
        bp.book_post_title like concat('%', #{keyword}, '%')
        or bp.book_post_text like concat('%', #{keyword}, '%')
        or bp.book_title like concat('%', #{keyword}, '%')
        or pm.member_nickname like concat('%', #{keyword}, '%')
        )
        group by bp.id, bp.book_post_title, bp.book_post_text,
        pm.member_nickname, pm.id,
        f.file_name, f.file_path
        <choose>
            <when test="sortType == 'like'">
                order by like_count desc
            </when>
            <when test="sortType == 'name'">
                order by bp.book_post_title collate utf8mb4_unicode_ci asc
            </when>
            <otherwise>
                order by p.createdDate desc
            </otherwise>
        </choose>
        limit 8 offset #{offset}
    </select>
    <!--  검색한 검색어에 맞는 독후감 전체 개수  -->
    <select id="selectAllBooksCount" resultType="_int">
        select
            count(*)
        from tbl_book_post bp
                 join tbl_post p on p.id = bp.id
                 join tbl_personal_member pm on pm.id = p.member_id
                 join tbl_member_profile mp on mp.member_id = pm.id
                 join tbl_file f on f.id = mp.id
        where bp.book_post_is_public = 'PUBLIC'
          and (
                bp.book_post_title like concat('%', #{keyword}, '%')
                or bp.book_post_text like concat('%', #{keyword}, '%')
                    or bp.book_title like concat('%', #{keyword}, '%')
                or pm.member_nickname like concat('%', #{keyword}, '%')
            )
    </select>
    <!--  검색한 검색어에 맞는 토론글 통합검색 조회  -->
    <select id="searchDiscussions" resultType="discussionPostDTO">
        select p.id, d.discussion_title, d.discussion_text, d.book_isbn, d.book_title, p.createdDate
        from tbl_discussion d
                 join tbl_post p on d.id = p.id
        where (
                  d.discussion_title like concat('%', #{keyword}, '%')
                  or d.discussion_text like concat('%', #{keyword}, '%')
                  or d.book_title like concat('%', #{keyword}, '%')
              )
        order by p.createdDate desc
        limit 3
    </select>
    <!--  검색한 검색어에 맞는 토론글 통합검색 개수 조회  -->
    <select id="selectAllDiscussionCount" resultType="_int">
        select count(*)
        from tbl_discussion d
                 join tbl_post p on d.id = p.id
        where (
                  d.discussion_title like concat('%', #{keyword}, '%')
                  or d.discussion_text like concat('%', #{keyword}, '%')
                  or d.book_title like concat('%', #{keyword}, '%')
              )
    </select>
    <!--  검색한 검색어에 맞는 토론글 무한스크롤로 출력  -->
    <select id="selectAllDiscussion" resultType="discussionPostDTO">
        select
        p.id,
        d.discussion_title,
        d.discussion_text,
        d.book_isbn,
        d.book_title,
        p.createdDate,
        (select count(*) from tbl_comment c where c.post_id = p.id) as comment_count
        from tbl_discussion d
        join tbl_post p on d.id = p.id
        where (
                d.discussion_title like concat('%', #{keyword}, '%')
                or d.discussion_text like concat('%', #{keyword}, '%')
                or d.book_title like concat('%', #{keyword}, '%')
        )
        <choose>
            <when test="sortType == 'comment'">
                order by comment_count desc
            </when>
            <when test="sortType == 'name'">
                order by d.discussion_title collate utf8mb4_unicode_ci asc
            </when>
            <otherwise>
                order by p.createdDate desc
            </otherwise>
        </choose>
        limit 8 offset #{offset}
    </select>
    <!--  검색한 검색어에 맞는 기부글 통합검색 조회  -->
    <select id="searchReceivers" resultType="receiverPostDTO">
        select
            p.id,
            r.receiver_title,
            r.receiver_text,
            rf_file.file_name as receiver_file_name,
            rf_file.file_path as receiver_file_path,
            mp_file.file_name as profile_file_name,
            mp_file.file_path as profile_file_path,
            p.createdDate,
            sm.sponsor_name
        from tbl_receiver r
                 join tbl_post p on r.id = p.id
                 join tbl_receiver_file rf on rf.receiver_id = r.id
                 join tbl_file rf_file on rf.id = rf_file.id
                 join tbl_sponsor_member sm on p.member_id = sm.id
                 join tbl_member_profile mp on mp.member_id = sm.id
                 join tbl_file mp_file on mp.id = mp_file.id
        where (
                  r.receiver_title like concat('%', #{keyword}, '%')
                      or r.receiver_text like concat('%', #{keyword}, '%')
                      or sm.sponsor_name like concat('%', #{keyword}, '%')
                  )
        order by p.createdDate desc
        limit 3
    </select>
    <!--  검색한 검색어에 맞는 기부글 통합검색 개수 조회  -->
    <select id="selectAllReceiverCount" resultType="_int">
        select
            count(*)
        from tbl_receiver r
                 join tbl_post p on r.id = p.id
                 join tbl_receiver_file rf on rf.receiver_id = r.id
                 join tbl_file rf_file on rf.id = rf_file.id
                 join tbl_sponsor_member sm on p.member_id = sm.id
                 join tbl_member_profile mp on mp.member_id = sm.id
                 join tbl_file mp_file on mp.id = mp_file.id
        where (
                  r.receiver_title like concat('%', #{keyword}, '%')
                      or r.receiver_text like concat('%', #{keyword}, '%')
                      or sm.sponsor_name like concat('%', #{keyword}, '%')
                  )
    </select>
    <!--  검색한 검색어에 맞는 기부글 무한스크롤로 출력  -->
    <!--  coalesce = 값이 하나도 없어서 null일 때 null 대신 지정한 값 반환  -->
    <select id="selectAllReceivers" resultType="receiverPostDTO">
        select
        p.id,
        r.receiver_title,
        r.receiver_text,
        rf_file.file_name as receiver_file_name,
        rf_file.file_path as receiver_file_path,
        mp_file.file_name as profile_file_name,
        mp_file.file_path as profile_file_path,
        p.createdDate,
        sm.sponsor_name,
        (select coalesce(sum(rl.receiver_like_point), 0) from tbl_receiver_like rl where rl.receiver_id = r.id) as like_score
        from tbl_receiver r
        join tbl_post p on r.id = p.id
        join tbl_receiver_file rf on rf.receiver_id = r.id
        join tbl_file rf_file on rf.id = rf_file.id
        join tbl_sponsor_member sm on p.member_id = sm.id
        join tbl_member_profile mp on mp.member_id = sm.id
        join tbl_file mp_file on mp.id = mp_file.id
        where (
        r.receiver_title like concat('%', #{keyword}, '%')
        or r.receiver_text like concat('%', #{keyword}, '%')
        or sm.sponsor_name like concat('%', #{keyword}, '%')
        )
        <choose>
            <when test="sortType == 'like'">
                order by like_score desc
            </when>
            <when test="sortType == 'name'">
                order by r.receiver_title collate utf8mb4_unicode_ci asc
            </when>
            <otherwise>
                order by p.createdDate desc
            </otherwise>
        </choose>
        limit 8 offset #{offset}
    </select>

    <!-- 특정 독후감 + 작성자 프로필 포함 상세정보 조회 -->
    <select id="selectBookPostWithFiles" resultType="fileBookPostDTO">
        select
            bp.id as book_post_id,
            bp.book_title,
            bp.book_isbn,
            count(bpl.id) as like_count,
            pm.member_name,
            pm.id as member_id,
            f.file_path,
            f.file_name,
            bp.book_post_title,
            bp.book_post_text,
            bp.book_post_start_date,
            bp.book_post_end_date,
            p.createdDate
        from tbl_book_post bp
                 join tbl_post p on bp.id = p.id
                 join tbl_personal_member pm on pm.id = p.member_id
                 left join tbl_member_profile mp on mp.member_id = pm.id
                 left join tbl_file f on f.id = mp.id
                 left join tbl_book_post_like bpl on bpl.book_post_id = bp.id
        where bp.book_post_is_public = 'PUBLIC'
          and bp.id = #{id}
        group by
            bp.id,
            bp.book_title,
            bp.book_isbn,
            pm.member_name,
            f.file_path,
            f.file_name,
            f.file_text,
            bp.book_post_start_date,
            bp.book_post_end_date,
            p.createdDate
    </select>

    <!-- 특정 독후감의 첨부파일 목록 -->
    <select id="selectBookPostFiles" resultType="bookPostFileDTO">
        select
            f.id,
            f.file_name,
            f.file_path,
            f.file_text
        from tbl_book_post_file bpf
        join tbl_file f on f.id = bpf.id
        where bpf.book_post_id = #{bookPostId}
    </select>

    <!-- 후원 대상 리스트(관리자) -->
    <select id="selectAllReceiverPost" resultType="receiverVO">
        select r.id, receiver_title, receiver_text, receiver_status, date(createdDate) as createdDate, date(updatedDate) as updatedDate, member_id
            from tbl_post p
                join tbl_receiver r
                    on r.id = p.id
        <where>
            <if test="keyword != null and keyword != ''">
                receiver_title like concat('%', #{keyword}, '%') or
                receiver_text like concat('%', #{keyword}, '%')
            </if>
        </where>
        limit #{rowCount}
        offset #{offset}
    </select>

    <!-- 후원 대상 페이징 처리-->
    <select id="countAllReceiverPost" resultType="_int">
        select count(*)
        from tbl_receiver
        <where>
            <if test="keyword != null and keyword != ''">
                receiver_title like concat('%', #{keyword}, '%') or
                receiver_text like concat('%', #{keyword}, '%')
            </if>
        </where>
    </select>

    <!-- 후원 대상-->
    <select id="selectReceiverById" resultType="receiverVO">
        select r.id, receiver_title, receiver_text, receiver_status, date(createdDate) as createdDate, date(updatedDate) as updatedDate, member_id
        from tbl_post p
            join tbl_receiver r
                on r.id = p.id
                    where r.id = #{id}
    </select>

    <!-- 토론 주제 등록 -->
    <insert id="insertDiscussionPost">
        insert into tbl_discussion (id, discussion_title, discussion_text, book_isbn, book_title)
        values (#{id}, #{discussionTitle}, #{discussionText}, #{bookIsbn}, #{bookTitle})
    </insert>

    <!--인기 독후감작성-->
    <select id="selectTopReview" resultType="BookPostVO">
        select id, book_post_title, book_post_text, book_post_is_public, book_post_start_date, book_post_end_date
        from tbl_book_post
    </select>


    <!--이 주의 기부 도서-->
    <select id="selectDonatedBooks" resultType="bookDonateVO">
        select *
        from tbl_book_donate
        where book_received_status = '수취완료'
        limit 10
    </select>

    <!--전체 기부 도서 -->
    <select id="selectAllDonatedBooks" resultType="bookDonateVO">
        select *
        from tbl_book_donate
        where book_received_status = '수취완료'
    </select>

    <!--후원 대상 게시판 조회용-->
    <select id="selectAllReceiverPosts" resultType="receiverVO">
        select
            r.id, p.member_id,
            r.receiver_title,
            r.receiver_text,
            r.receiver_status, datediff(curdate(), p.createdDate) as createdDate, datediff(curdate(), p.updatedDate) as updatedDate
            from tbl_receiver r
            join tbl_post p on r.id = p.id
            order by r.id desc
    </select>

    <!-- 후원 대상 게시글 상세보기 -->
    <select id="selectReceiverPostById" resultType="receiverVO">
        select
            r.id, p.member_id,
            r.receiver_title,
            r.receiver_text,
            r.receiver_status, datediff(curdate(), p.createdDate) as createdDate, datediff(curdate(), p.updatedDate) as updatedDate
        from tbl_receiver r
            join tbl_post p on r.id = p.id
                where r.id = #{postId}
    </select>


    <!-- 후원 인증 게시판 조회용 -->
    <select id="selectAllDonateCerts" resultType="donateCertVO">
        select dc.id, donate_cert_title, donate_cert_text, post_type, member_id, datediff(curdate(), p.createdDate) as createdDate, p.updatedDate
        from tbl_donate_cert dc
        join tbl_post p on dc.id = p.id
            order by dc.id desc
    </select>

    <!-- 후원 인증 게시글 상세보기 -->
    <select id="selectDonateCertById" resultType="donateCertVO">
        select dc.id, donate_cert_title, donate_cert_text, post_type, member_id, datediff(curdate(), p.createdDate) as createdDate, p.updatedDate
        from tbl_donate_cert dc
                 join tbl_post p on dc.id = p.id
                    where dc.id = #{postId}
    </select>

    <!--토론 게시판 조회용-->
    <select id="selectAllDiscussions" resultType="discussionVO">
        select d.id, discussion_title, discussion_text, book_isbn, p.member_id, datediff(curdate(), p.createdDate) as createdDate, p.updatedDate
        from tbl_discussion d
                 join tbl_post p
                      on d.id = p.id
                        order by d.id desc
    </select>

    <!--토론 게시판 게시글 상세보기 -->
    <select id="selectDiscussionById" resultType="discussionVO">
        select d.id, discussion_title, discussion_text, book_isbn, p.member_id, datediff(curdate(), p.createdDate) as createdDate, p.updatedDate
        from tbl_discussion d
                 join tbl_post p
                      on d.id = p.id
                        where d.id = #{id};
    </select>

<!--    <insert id="insertPost" useGeneratedKeys="true" keyProperty="id">-->
<!--        insert into tbl_post (post_type, member_id)-->
<!--        values (#{postType}, #{memberId})-->
<!--    </insert>-->
    <!-- 슈퍼키 작성용 -->
    <insert id="insertPost" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_post (post_type, member_id)
        values (#{postType}, #{memberId})
    </insert>

    <!-- 후원 대상 선정 여부 결정. -->
    <update id="updateTopReceiver">
        update tbl_receiver
        set receiver_status = '선정완료'
        where id = #{receiverId}
    </update>

    <!--  독후감 피드 전체조회(무한스크롤)  -->
    <select id="selectAllBookPostFeed" resultType="fileBookPostDTO">
        select bp.id as book_post_id, bp.book_post_title, bp.book_post_text, pm.member_name, bp.book_isbn, p.member_id, f.file_name, f.file_path, p.createdDate,
               (select count(*)
                from tbl_book_post_like l
                where l.book_post_id = bp.id) as like_count
        from tbl_book_post bp
        join tbl_post p on p.id = bp.id
        join tbl_member m on p.member_id = m.id
        join tbl_personal_member pm on pm.id = m.id
        join tbl_member_profile mp on mp.member_id = m.id
        join tbl_file f on f.id = mp.id
        where bp.book_post_is_public = 'PUBLIC'
        order by p.createdDate desc
        limit 12 offset #{offset}
    </select>

    <!--  독후감 팔로잉 전체조회(무한스크롤)  -->
    <select id="selectFollowBookPostFeed" resultType="fileBookPostDTO">
        select bp.id as book_post_id, bp.book_post_title, bp.book_post_text, bp.book_isbn, pm.member_name,
               p.member_id, f.file_name, f.file_path, p.createdDate,
               (select count(*)
                from tbl_book_post_like l
                where l.book_post_id = bp.id) as like_count
        from tbl_book_post bp
                 join tbl_post p on p.id = bp.id
                 join tbl_member m on p.member_id = m.id
                 join tbl_personal_member pm on pm.id = m.id
                 join tbl_member_profile mp on mp.member_id = m.id
                 join tbl_file f on f.id = mp.id
                 join tbl_follow fl on fl.follow_receiver_id = m.id
        where bp.book_post_is_public = 'PUBLIC' and fl.follow_sender_id = #{loginMemberId}
        order by p.createdDate desc
        limit 12 offset #{offset}
    </select>

    <!--  일반도서 독후감 작성  -->
    <insert id="insertPostBook" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_post (post_type, member_id)
        values ('BOOK_POST', #{memberId})
    </insert>

    <insert id="insertBookPost">
        insert into tbl_book_post (id, book_post_title, book_post_text, book_post_is_public, book_post_start_date, book_post_end_date, book_isbn, book_title)
        values (#{id}, #{bookPostTitle}, #{bookPostText}, #{bookPostIsPublic}, #{bookPostStartDate}, #{bookPostEndDate}, #{bookIsbn}, #{bookTitle})
    </insert>

    <!--  선정도서 독후감 작성  -->
    <insert id="insertSelectedBookPost">
        insert into tbl_selected_book_post(id, book_id, book_post_status)
        values (#{id}, #{bookId}, #{bookPostStatus})
    </insert>

    <!--  독후감 수정을 위한 데이터 조회  -->
    <select id="selectWrittenBookPost" resultType="fileBookPostDTO">
        select p.id as book_post_id, pm.member_name, p.member_id, bp.book_isbn, bp.book_title, bp.book_post_title, bp.book_post_text,
               bp.book_post_is_public
        from tbl_post p
        join tbl_book_post bp on p.id = bp.id
        join tbl_personal_member pm on pm.id = p.member_id
        where p.id = #{bookPostId}
    </select>

    <select id="selectWrittenSelectedPost" resultType="fileBookPostDTO">
        select book_id, book_image_url, book_post_status
        from tbl_selected_book sb
        join tbl_selected_book_post sbp on sb.id = sbp.book_id
        where sbp.id = #{bookPostId}
    </select>

    <!--  독후감 수정  -->
    <update id="updatePost">
        update tbl_post set updatedDate = current_timestamp
        where id = #{id}
    </update>

    <update id="updateBookPost">
        update tbl_book_post set book_post_title = #{bookPostTitle},
                                 book_post_text = #{bookPostText},
                                book_post_is_public = #{bookPostIsPublic}
        where id = #{id}
    </update>

    <update id="updateSelectedBookPost">
        update tbl_selected_book_post set book_post_status = #{bookPostStatus}
        where id = #{id}
    </update>

    <insert id="insertDonateCertPost" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_donate_cert (id, donate_cert_title, donate_cert_text)
        values (#{id}, #{donateCertTitle}, #{donateCertText})
    </insert>

    <insert id="insertReceiverPost" useGeneratedKeys="true" keyProperty="id">
        insert into tbl_receiver (id, receiver_title, receiver_text)
        values (#{id}, #{receiverTitle}, #{receiverText})
    </insert>

    <update id="updateReceiverPost">
        update tbl_receiver
        set receiver_title = #{receiverTitle}, receiver_text = #{receiverText}
        where id = #{id}
    </update>

    <update id="updateDonateCertPost">
        update tbl_donate_cert
        set donate_cert_title = #{donateCertTitle}, donate_cert_text = #{donateCertText}
        where id = #{id}
    </update>

    <!--  내가 쓴 독후감 정보 조회  -->
    <select id="selectMyBookPosts" resultType="fileBookPostDTO">
        SELECT
            bp.id as bookPostId,
            bp.book_post_title,
            bp.book_post_text,
            bp.book_post_is_public,
            bp.book_isbn,
            bp.book_title,
            p.createdDate,
            pm.member_nickname,
            pm.id,
            COUNT(bpl.id) AS likeCount,

            -- 프로필 이미지
            prf.file_path,
            prf.file_name

        FROM tbl_book_post bp
                 JOIN tbl_post p ON bp.id = p.id
                 LEFT JOIN tbl_book_post_like bpl ON bp.id = bpl.book_post_id
                 JOIN tbl_personal_member pm ON p.member_id = pm.id

            -- 프로필 이미지 (회원 프로필 이미지 연결)
                 LEFT JOIN tbl_member_profile mp ON pm.id = mp.member_id
                 LEFT JOIN tbl_file prf ON mp.id = prf.id

        WHERE p.member_id = #{memberId}
        GROUP BY
            bp.id, bp.book_post_title, bp.book_post_text, bp.book_post_is_public,
            bp.book_isbn, bp.book_title, bp.book_post_start_date, bp.book_post_end_date,
            p.createdDate, pm.member_nickname, pm.id, prf.file_path, prf.file_name
        ORDER BY
            CASE WHEN #{sort} = 'recent' THEN p.createdDate END DESC,
            CASE WHEN #{sort} = 'old' THEN p.createdDate END ASC,
            CASE WHEN #{sort} = 'like' THEN likeCount END DESC
        LIMIT 5 OFFSET #{offset};
    </select>

    <!--  독후감 삭제  -->
    <delete id="deletePost">
        delete from tbl_post where id = #{bookPostId}
    </delete>

    <delete id="deleteBookPost">
        delete from tbl_book_post where id = #{bookPostId}
    </delete>
</mapper>



